#######################################################
# Possibile soluzione accodamento policy enforced TLS
#######################################################


###creare bucket s3:

###S3 Bucket
#Sandbox
resource "aws_s3_bucket" "sandbox_vpc_flow_logs_bucket" {
provider = aws.vpc_region
  bucket = "${data.aws_ssm_parameter.lz_env.value == "PROD" ? "eniaws" : "enidev"}-s3-euwe1-${data.aws_ssm_parameter.department_code.value}x-${data.aws_caller_identity.current.account_id}-flowlogs"
}
 
resource "aws_s3_bucket_versioning" "vpc_flow_logs_bucket_versioning" {
  provider = aws.vpc_region
  bucket = aws_s3_bucket.sandbox_vpc_flow_logs_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}
 
###creare flow log
resource "aws_flow_log" "sandbox_vpc_flow_logs" {
  provider = aws.vpc_region
  log_destination = aws_s3_bucket.sandbox_vpc_flow_logs_bucket.arn
  log_destination_type = "s3"
  traffic_type    = "ALL"
  vpc_id          = aws_vpc.vpc_sandbox.id
  log_format = "$${account-id} $${action} $${az-id} $${bytes} $${dstaddr} $${dstport} $${end} $${flow-direction} $${instance-id} $${interface-id} $${log-status} $${packets} $${pkt-dst-aws-service} $${pkt-dstaddr} $${pkt-src-aws-service} $${pkt-srcaddr} $${protocol} $${region} $${srcaddr} $${srcport} $${start} $${sublocation-id} $${sublocation-type} $${subnet-id} $${tcp-flags} $${traffic-path} $${type} $${version} $${vpc-id}"
  destination_options {
    file_format        = "plain-text"
    per_hour_partition = true
  }
  tags = {
    Name = "default"
  }
}
 
##creare iam role
 
###IAM ROLE
resource "aws_iam_role" "replication_role" {
  provider = aws.vpc_region
  name = "${data.aws_ssm_parameter.lz_env.value == "PROD" ? "eniaws" : "enidev"}-rol-${data.aws_ssm_parameter.department_code.value}x-${data.aws_ssm_parameter.account_code.value}-vpcflowlogs-s3replrole" #"s3-replication-role" #da modificare
 
  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "s3.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
POLICY
}
 
resource "aws_iam_policy" "replication_policy" {
  provider = aws.vpc_region
  name        = "${data.aws_ssm_parameter.lz_env.value == "PROD" ? "eniaws" : "enidev"}-ply-${data.aws_ssm_parameter.department_code.value}x-${data.aws_ssm_parameter.account_code.value}-vpcflowlogs-s3replplcy" #"tf-s3-replication-policy"
  description = "S3 bucket replication policy"
  policy      = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:GetReplicationConfiguration",
        "s3:ListBucket",
        "s3:GetObjectVersion",
        "s3:GetObjectVersionAcl",
        "s3:ReplicateObject",
        "s3:ReplicateDelete"
      ],
      "Effect": "Allow",
      "Resource": [
        "${aws_s3_bucket.sandbox_vpc_flow_logs_bucket.arn}/*",
        "${aws_s3_bucket.sandbox_vpc_flow_logs_bucket.arn}",
        "${data.aws_ssm_parameter.centralized_flow_log_bucket_arn.value}/*",
        "${data.aws_ssm_parameter.centralized_flow_log_bucket_arn.value}"
      ]
    }
  ]
}
POLICY
}
 
resource "aws_iam_role_policy_attachment" "replication" {
  provider = aws.vpc_region
  role       = aws_iam_role.replication_role.name
  policy_arn = aws_iam_policy.replication_policy.arn
}
 
###Bucket Replication
#vpc vended
resource "aws_s3_bucket_replication_configuration" "vpc_sandbox_bucket_replication" {
  provider = aws.vpc_region
  role = aws_iam_role.replication_role.arn
  bucket = aws_s3_bucket.sandbox_vpc_flow_logs_bucket.id
  rule {
    id = "${data.aws_ssm_parameter.lz_env.value == "PROD" ? "eniaws" : "enidev"}-srr-euwe1-${data.aws_ssm_parameter.department_code.value}x-vpcflowlogs-s3replicationconf"
    status = "Enabled"
    destination {
      bucket        = data.aws_ssm_parameter.centralized_flow_log_bucket_arn.value
      storage_class = "STANDARD"
    }
  }
}

# get actual policy for a bucket
data "aws_s3_bucket_policy" "get_bucket_policy" {
  bucket = aws_s3_bucket.sandbox_vpc_flow_logs_bucket.id
  depends_on = [ aws_flow_log.sandbox_vpc_flow_logs ] # the resource aws_flow_log is responsable of genereting automatic policy on bucket s3 , so we need to create a dependencies
}

# definition of the enforced tls policy, 
#NOTE: we need to eliminate the SID because AWS check the sid and block two sid duplicated on a policy and the second run of terraform we can get an error on the "data "aws_s3_bucket_policy" "get_bucket_policy""
data "aws_iam_policy_document" "enforced_tls_policy" {
  statement {
    effect = "Deny"
    principals {
      type        = "AWS"
      identifiers = ["*"]
    }

    actions = [
      "s3:*",
    ]

    resources = [
      aws_s3_bucket.sandbox_vpc_flow_logs_bucket.arn,
      "${aws_s3_bucket.sandbox_vpc_flow_logs_bucket.arn}/*",
    ]
    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }
}

# used to combined the acctual policy with the enforced tls policy
data "aws_iam_policy_document" "combined_policy" {
  source_policy_documents = [
    data.aws_s3_bucket_policy.get_bucket_policy.policy,
    data.aws_iam_policy_document.enforced_tls_policy.json,
  ]
}

# acctualy attach the combined policy on the aws s3 bucket
# the ingore_changes is used because otherwise each run of terraform we add the same enforced policy in append
resource "aws_s3_bucket_policy" "attach_enforced_tls_policy" {
  bucket = aws_s3_bucket.sandbox_vpc_flow_logs_bucket.id
  policy = data.aws_iam_policy_document.combined_policy.json
  lifecycle {
    ignore_changes = [ policy ]
  }
}













###Bucket Policy: enforced https
resource "aws_s3_bucket_policy" "enforced_https" {
    provider = aws.vpc_region
    bucket = aws_s3_bucket.sandbox_vpc_flow_logs_bucket.id
    policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
            {
                Sid       = "EnforceTls"
                Effect    = "Deny"
                Principal = "*"
                Action    = "s3:*"
                Resource = [
                    "${aws_s3_bucket.sandbox_vpc_flow_logs_bucket.arn}/*",
                    "${aws_s3_bucket.sandbox_vpc_flow_logs_bucket.arn}",
                ]
                Condition = {
                    Bool = {
                        "aws:SecureTransport" = "false"
                    }
                }
            }
        ]
    })
}